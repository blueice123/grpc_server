apiVersion: apps/v1
kind: Deployment
metadata:
  name: tcptest1
spec:
  selector:
    matchLabels:
      app: jt-tcp
  replicas: 1
  strategy:
    type: RollingUpdate
  minReadySeconds: 10
  template:
    metadata:
      labels:
        app: jt-tcp
    spec:
      containers:
      - name: container
        image: taeknical/tcptest
        ports:
        - containerPort: 50051
      terminationGracePeriodSeconds: 0
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tcptest2
spec:
  selector:
    matchLabels:
      app: jt-tcp
  replicas: 1
  strategy:
    type: RollingUpdate
  minReadySeconds: 10
  template:
    metadata:
      labels:
        app: jt-tcp
    spec:
      containers:
      - name: container
        image: taeknical/tcptest
        ports:
        - containerPort: 50051
      terminationGracePeriodSeconds: 0
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-nlb2
  annotations:
    ## 공통 설정
    service.beta.kubernetes.io/aws-load-balancer-type: external
    service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip
    ## 내외부 설정
    service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing  ## Public network 
    #service.beta.kubernetes.io/aws-load-balancer-scheme: internal  ## Private network
    ## 타겟그룹에 대한 속성 설정
    service.beta.kubernetes.io/aws-load-balancer-target-group-attributes: "deregistration_delay.timeout_seconds=10" #, stickiness.enabled=true,stickiness.type=source_ip" # supported values ["deregistration_delay.timeout_seconds=10, stickiness.enabled=true,stickiness.type=source_ip, proxy_protocol_v2.enabled=true, deregistration_delay.connection_termination.enabled=true, preserve_client_ip.enabled=true"]
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
spec:
  ports:
    - port: 80
      name: tcp-80
      targetPort: 80
      protocol: TCP #supported values: [UDP, TCP, TCP_UDP, HTTP, HTTPS]
  type: LoadBalancer
  selector:
    app: jt-tcp